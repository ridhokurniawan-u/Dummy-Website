- name: Deploy Pipeline CAP with Fail-Safe
  hosts: service_mertani
  vars:
    deploy_dir: /home/ubuntu/mertani-backend-revamp

  tasks:
  - name: Create backups directory
    ansible.builtin.file:
      path: "{{ deploy_dir }}/backups"
      state: directory
      mode: "0755"

  - name: Back up the old binary and logs
    ansible.builtin.shell: |
      cd {{ deploy_dir }}
      timestamp=$(date +%Y-%m-%d-%H:%M:%S)
      if [ -f mertani-backend-revamp ]; then
        mv mertani-backend-revamp backups/mertani-backend-revamp_backup_${timestamp}
      fi
      if [ -f mertani-backend-revamp.out ]; then
        mv mertani-backend-revamp.out backups/mertani-backend-revamp_backup_${timestamp}.log
      fi

  - name: Deploy and Start New Service
    block:
      - name: Copy the new binary to the production server
        ansible.builtin.copy:
          src: "/tmp/mertani-backend-revamp/mertani-backend-revamp"
          dest: "{{ deploy_dir }}/mertani-backend-revamp"
          mode: "0755"

      - name: Check if the old service is running
        ansible.builtin.command: "pidof mertani-backend-revamp"
        register: pidof_result
        ignore_errors: yes

      - name: Kill old process if running
        ansible.builtin.shell: "sudo kill -9 {{ pidof_result.stdout }}"
        when: pidof_result.stdout != ""

      - name: Start the new service with nohup
        ansible.builtin.shell: |
          cd {{ deploy_dir }}
          nohup ./mertani-backend-revamp -p prod > mertani-backend-revamp.out 2>&1 &
        notify: restart backend service
        register: deploy_logs

      - name: Verify the new service is running
        ansible.builtin.command: "pidof mertani-backend-revamp"
        register: new_service_pid
        failed_when: new_service_pid.stdout == ""

      - name: Debug new service PID
        ansible.builtin.debug:
          var: new_service_pid.stdout

    rescue:
      - name: Debug running process during rescue
        ansible.builtin.command: "pidof mertani-backend-revamp"
        register: rescue_pid_debug
        ignore_errors: yes
        changed_when: false
    
      - name: Debug PID in rescue mode
        ansible.builtin.debug:
          var: rescue_pid_debug.stdout_lines
    
      - name: Get latest binary file
        ansible.builtin.shell: |
          if [ "$(ls -t {{ deploy_dir }}/backups/mertani-backend-revamp_backup_* 2>/dev/null | wc -l)" -ne "0" ]; then
            ls -t {{ deploy_dir }}/backups/mertani-backend-revamp_backup_* | head -n 1
          else
            echo "No backup file found."
          fi
        register: latest_compiled
        changed_when: false
        become: yes
    
      - name: Get latest log file
        ansible.builtin.shell: |
          ls -t {{ deploy_dir }}/backups/mertani-backend-revamp_backup_*.log | head -n 1
        register: latest_log
        changed_when: false
        become: yes
    
      - name: Move backup
        ansible.builtin.shell: |
          cp {{ latest_compiled.stdout }} {{ deploy_dir }}/mertani-backend-revamp
          cp {{ latest_log.stdout }} {{ deploy_dir }}/mertani-backend-revamp.out
        become: yes
    
      - name: Restart old service
        ansible.builtin.meta: flush_handlers
        register: restore_logs
        become: yes
    
      - name: Debug restoration logs
        ansible.builtin.debug:
          var: restore_logs.stdout_lines
          
  handlers:
    - name: restart backend service
      ansible.builtin.shell: |
        cd {{ deploy_dir }}
        nohup ./mertani-backend-revamp -p prod > mertani-backend-revamp.out 2>&1 &
